// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  RECORDER
  ADMIN
  SUPER_ADMIN
}

model Admin {
  id         Int    @id @unique @default(autoincrement())
  first_name String
  last_name  String
  username   String @unique
  password   String
  email      String @unique
  role       Role   @default(ADMIN)
}

model Recorder {
  id            String      @id @unique @default(dbgenerated())
  first_name    String
  last_name     String
  username      String      @unique
  password      String
  email         String      @unique
  subdistrict   Subdistrict @relation(fields: [subdistrictId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subdistrictId Int         @map("subdistrict_id")
  addresses     Address[]
  role          Role        @default(RECORDER)
  Pet           Pet[]
  Pet_owner     Pet_owner[]
}

model Subdistrict {
  id           Int            @id @default(autoincrement())
  name         String
  sub_district String
  district     String
  province     String
  zipcode      String
  recorders    Recorder[]
  address      Address[]
  unregisters  Unregistered[]
}

model Address {
  id            Int          @id @default(autoincrement())
  house_name    String
  house_number  String
  moo           String
  soi           String?
  street        String?
  recorder      Recorder?    @relation(fields: [recorderId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  recorderId    String?      @map("recorder_id")
  subdistrict   Subdistrict? @relation(fields: [subdistrictId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  subdistrictId Int?
  pet_owners    Pet_owner?
}

model Pet_owner {
  id              Int       @id @default(autoincrement())
  first_name      String
  last_name       String
  identity_number String    @unique
  tel             String
  address         Address   @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  addressId       Int       @unique @map("address_id")
  recorder        Recorder? @relation(fields: [recorderId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  recorderId      String?   @map("recorder_id")
  pets            Pet[]
}

enum Pet_type {
  DOG
  CAT
}

enum Pet_gender {
  MALE
  FEMALE
}

model Pet {
  id           Int        @id @default(autoincrement())
  name         String
  type         Pet_type
  gender       Pet_gender
  color        String
  defect       String
  age          Float      @default(0.1)
  vaccined     Vaccine    @default(NOT_VACCINED)
  vaccine_date String
  sterilized   Sterilize  @default(NOT_STERILIZED)
  location     Location   @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  locationId   Int        @map("location_id")
  nature       Nature     @relation(fields: [natureId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  natureId     Int        @map("nature_id")
  petOwner     Pet_owner  @relation(fields: [petOwnerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  petOwnerId   Int        @map("pet_owner_id")
  recorder     Recorder?  @relation(fields: [recorderId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  recorderId   String?    @map("recorder_id")
}

model Location {
  id            Int            @id @default(autoincrement())
  location      String
  name_location String?
  pets          Pet[]
  unregistereds Unregistered[]
}

model Nature {
  id          Int    @id @default(autoincrement())
  name_nature String
  pets        Pet[]
}

enum Sterilize {
  STERILIZED
  NOT_STERILIZED
}

enum Vaccine {
  VACCINED
  NOT_VACCINED
}

model Unregistered {
  id            Int         @id @default(autoincrement())
  address_moo   String
  dog_amount    Int
  cat_amount    Int
  name_info     String
  location      Location    @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  locationId    Int         @map("location_id")
  vaccined      Vaccine     @default(NOT_VACCINED)
  sterilized    Sterilize   @default(NOT_STERILIZED)
  address       Subdistrict @relation(fields: [subdistrictId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subdistrictId Int         @map("subdistrict_id")
}

model New_Img {
  id    Int    @id @default(autoincrement())
  title String
  url   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt()
}
