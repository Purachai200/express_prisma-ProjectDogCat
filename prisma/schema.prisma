// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  RECORDER
  ADMIN
  SUPER_ADMIN
}

model Admin {
  id         Int    @id @unique @default(autoincrement())
  first_name String
  last_name  String
  username   String
  password   String
  email      String
  role       Role   @default(ADMIN)
}

model Recorder {
  id            String      @id @unique @default(dbgenerated())
  first_name    String
  last_name     String
  username      String
  password      String
  email         String
  subdistrict   Subdistrict @relation(fields: [subdistrictId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subdistrictId Int         @map("subdistrict_id")
  addresses     Address[]
  role          Role        @default(RECORDER)
}

model Subdistrict {
  id           Int        @id @default(autoincrement())
  name         String
  sub_district String
  district     String
  province     String
  zipcode      String
  recorders    Recorder[]
}

model Address {
  id           Int        @id @default(autoincrement())
  house_name   String
  house_number String
  moo          String
  soi          String?
  street       String?
  reocorder    Recorder?  @relation(fields: [recorderId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  recorderId   String?       @map("recorder_id")
  Pet_owner    Pet_owner?
}

model Pet_owner {
  id              Int          @id @default(autoincrement())
  first_name      String
  last_name       String
  identity_number String
  tel             String
  address         Address      @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  addressId       Int          @unique @map("address_id")
  registereds     Registered[]
}

model Registered {
  id           Int       @id @default(autoincrement())
  registeredAt DateTime  @default(now())
  pet_owner    Pet_owner @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId      Int       @map("owner_id")
  pet          Pet?      @relation(fields: [petId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  petId        Int?      @unique @map("pet_id")
}

enum Pet_type {
  DOG
  CAT
}

enum Pet_gender {
  MALE
  FEMALE
}

model Pet {
  id                Int               @id @default(autoincrement())
  name              String
  type              Pet_type
  gender            Pet_gender
  color             String
  defect            String
  age               Float             @default(0.1)
  location          Location          @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  locationId        Int               @map("location_id")
  nature            Nature            @relation(fields: [natureId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  natureId          Int               @map("nature_id")
  vaccine_sterilize Vaccine_sterilize @relation(fields: [vacSterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vacSterId         Int               @map("vac_ster_id")
  registered        Registered?
}

model Location {
  id            Int            @id @default(autoincrement())
  location      String
  name_location String?
  pets          Pet[]
  unregistereds Unregistered[]
}

model Nature {
  id          Int    @id @default(autoincrement())
  name_nature String
  pets        Pet[]
}

enum Sterilize {
  Sterilize
  Not_sterilized
}

enum Vaccine {
  Vaccined
  Not_vaccined
}

model Vaccine_sterilize {
  id            Int            @id @default(autoincrement())
  vac_history   String?
  vac_date      DateTime
  sterilize     Sterilize?
  pets          Pet[]
  unregistereds Unregistered[]
}

model Unregistered {
  id                Int               @id @default(autoincrement())
  address           String
  dog_amount        Int
  cat_amount        Int
  name_info         String
  location          Location          @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  locationId        Int               @map("location_id")
  vaccine_sterilize Vaccine_sterilize @relation(fields: [vacSterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vacSterId         Int               @map("vac_ster_id")
}
